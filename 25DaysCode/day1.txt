	class Solution {
public:
    
    
    int func(int index , int prev , int n , vector<int> &arr , vector<vector<int> > &dp ){
        
        if(index == n){
            return 0;
        }
        
        if(dp[index][prev+1] != -1){
            return dp[index][prev+1];
        }
        
        
        int nottake = 0 + func(index+1 , prev , n , arr , dp);
        
        int take = 0;
        
        if(prev == -1 || (prev>=0 && arr[index] > arr[prev]) ){
            take = 1 + func(index+1 , index , n , arr , dp);
        }
        
        return dp[index][prev+1] = max(nottake , take);
        
    }
    
    
    int lengthOfLIS(vector<int>& nums) {
        
        
        
        int n = nums.size();
        
        vector<vector<int> > dp(n , vector<int> (n+1 , -1));
        
        return func(0 , -1 , n  , nums , dp);
        
    }
};